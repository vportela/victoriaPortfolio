what is an API? 

it stands for 

what is an interface?
    Basically it is like an object (radio for example) that a user can control certain things
    like a radio has knobs to change the channels but you can't get all up inside it. 
    or a car has a gas pedal but a driver cannot decide how much fuel gets injected into the engine
    at any given time, they can just press the gas pedal.

    They don't need to know what is happening under the hood when they press the gas ped
    al. 
    They just need to know that when they press the gas pedal, the car goes. 
    the hidden info is "abstracted" 

    interfaces define the way a user interacts with a product whether it is physical or digital.
    they dont need to understand the implementation.

    Ui is made for users to use the application
    API is for developers to extend their applications

    programming languages use API's, for example if you want to make your text all uppercase you would use .upper (or something like that)
    and then it would make all your text uppercase for you instead of you having to do it from scratch. it's doing shit under the hood
    that you dont need to understand to make your life easier. 
    they hlep oyu avoid recreating the wheel. 

    REST - representational state transfer - a remote API
    graphQL is also a remote api

    remote API is done via the internet, often because your device's local memory cant store all that data.
    like soundhound will listen to a song and identify it by calling a web based API in order to parse thorugh 
    every song in it's library.

    Google translate's camera translation function also uses this kind of method. 

    protocol- a contract that defines HOW to communicate instead of WHAT to communicate like an API
    

    requirements for an API to be considered restful: 

        - client-server architecture
        - Statelessness
        - Layered System
        - Cacheability
        - Uniform Design
        - Code on demand

    CRUD - Create Read Update Delete


    -------------- from christopher

    request - response api -> most web API's


    define how a user is going to talk to an API. 
    use fetch to talk to API
    normally people use JSON to send data
    form url encoded - > the browser takes the form data and it turns it into this url type code that sends to the server 

    replit is a good website for testing things out

---------------------------------------------------


    const express = require('express);

    const app = express()
    const port = 3000


//req means request
//res means response
    app.get('/', (req, res) => {     --------this is an HTTP request handler. so it must be a get request and it must be "/" 
        console.dir(req.cookies);
        res.cookie("test", "victoria")
        res.send(`${req.hostname} <br> hello world!`)
    })

    app.post("login", (req, res) => { -------- this is kinda like a filter, only osmething that matches this criteria 
        res.send("invalid login" )
    })

app.listen(port, () => { 
    console.log(`example app listening on port ${port}`)
})

--------------------------------------------------------------------
    express lets you define a path and set a function

    fetch - you can tell it that you want to do a post fetch 
    fetch is how you send a request


    fetch can be awaited - question for lucas

    fetch makes a request and then you get a response


    how do i, in the response, set a cookie.
    you can use a cookie which takes a key-value pair

    res.cookie will let you get a name 
    whenever you send info to the browswer, you include the cookie in the fetch. 

    you can request req.cookies.name 



------the syntax we are going to write in is typescript.------
typescript: superset of JS that makes javascript typesafe.
it is just typesafe JS. 

react: a framework that allows you to write easier html/rednder stuff


----- framework is NODE -------------
node is not a different language

-------framework/dependency is EXPRESS ---------

express allows you to create APIs 

created repository
created blank project
added dependencies
    - node
    -typescript
scripts to build and run application 

added axios to frontend which allows you to make API calls
from the front end react app.

API's are just functions on a URL
they only execute when you are on that URL

so instead of manually calling a function 
you have it ready to go and anyone can call 
that API or function when they are on that url 



first thing is you have to have a server which can
listen to requests

app.listen is listening for port 5000

you can add API's to the server which is what you did
on line 5. 



so when you have your registration
you click the register button 
which does an onclick/submit and in that onclick submit
you would call the API

request in the API would recieve the inputted data values
like username, email etc. 
create a user object or something and then 
once you are done manipulating the data, you send it back
to the front end with the response.

once you have the response you will redirect the user to /login 
or another new URL


most common HTTP request methods i will use are : 
get and post
get will get data
post will create data

so when you are creating a user, you are creating a post request

when you are loggin a user in you create a post request because 
you are authenticating the users login

you handle the posts with get, the front end just displays the back end data

-----------------

useEffect is a lifecycle hook that refeshes every time 
something in a component changes

promise is a wrapper around any other data type
you can have a promise of a string etc 
promises allow you to have async code (code that does not run in order, like JS) 


get the #2 thing to work but with the API
so get users to post messages using the API 
make it so that when you first get into the app you see posts from the user,
when you type something and click button, make it so the change happens
on the API NOT on the front end. 

------------------these are ur goals-----------------
